from pathlib import Path
from django.template.loader import render_to_string
from django.conf import settings
from telegram_framework import actions, messages, use, keyboards, bots
from telegram_framework.keyboards import layouts
from demo.models import Faq


def send_bot_info(bot, message):
    text = render_to_string('demo/bot/start.html')
    info_message = messages.create_message(
        text, sender=bot, format_type='HTML'
    )
    return actions.send_message(message.chat, info_message)


# START send_text_message_example
def send_text_message_example(bot, message):
    text = '–ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è'
    text_message = messages.create_message(
        text=text,
        sender=bot,
    )
    return actions.send_message(message.chat, text_message)
# END send_text_message_example


# START send_html_message_example
def send_html_message_example(bot, message):
    text = '<b>–ü—Ä–∏–º–µ—Ä</b> <i>–æ—Ç–ø—Ä–∞–≤–∫–∏</i> <s>—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ</s> HTML —Å–æ–æ–±—â–µ–Ω–∏—è'
    text_message = messages.create_message(
        text=text,
        sender=bot,
        format_type='HTML',
    )
    return actions.send_message(message.chat, text_message)
# END send_html_message_example


# START render_template_example
def render_template_example(bot, message):
    context = {
        'this': '–≠—Ç–æ',
        'message': '—Å–æ–æ–±—â–µ–Ω–∏–µ',
        'make': '–±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ –ø–æ —à–∞–±–ª–æ–Ω—É'
    }
    response_message = messages.create_template_message(
        sender=bot,
        template='demo/bot/reply.html',
        context=context,
    )
    return actions.send_message(message.chat, response_message)
# END render_template_example


# START echo_answer_example
def echo_answer_example(bot, message):
    text = f'–ù–∞ –ª—é–±–æ–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —è —É–º–µ—é –ø—Ä–∏—Å—ã–ª–∞—Ç—å –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç: {message.text}'
    echo_reply = messages.create_reply(message, text, bot)
    return actions.send_reply(echo_reply)
# END echo_answer_example


# START fixed_text_answer_example
def fixed_text_answer_example(bot, message):
    text = f'–ù–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.text}, —è –¥–∞—é —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞'
    reply = messages.create_reply(message, text, bot)
    return actions.send_reply(reply)
# END fixed_text_answer_example


# START contains_text_answer_example
def contains_text_answer_example(bot, message):
    text = '–ù–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ "–ü—Ä–∏–≤–µ—Ç", —è –≥–æ–≤–æ—Ä—é "–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç"'
    reply = messages.create_reply(message, text, bot)
    return actions.send_reply(reply)
# END contains_text_answer_example


# START send_picture_example
def send_picture_example(bot, message):
    file_path = Path(settings.BASE_DIR) / 'static' / 'logo_1280_640.png'
    image = messages.create_image(bot, file_path)
    return actions.send_image(message.chat, image)
# END send_picture_example


# START send_picture_with_caption_example
def send_picture_with_caption_example(bot, message):
    file_path = Path(settings.BASE_DIR) / 'static' / 'logo_1280_640.png'
    caption = messages.create_message('–≠—Ç–æ –ª–æ–≥–æ—Ç–∏–ø—ã DTF', bot)
    image = messages.create_image(bot, file_path, caption)
    return actions.send_image(message.chat, image)
# END send_picture_with_caption_example


# START send_picture_with_html_caption_example
def send_picture_with_html_caption_example(bot, message):
    file_path = Path(settings.BASE_DIR) / 'static' / 'logo_1280_640.png'
    caption = messages.create_message(
        '–≠—Ç–æ –ª–æ–≥–æ—Ç–∏–ø—ã <b>DTF</b>',
        bot,
        format_type='HTML'
    )
    image = messages.create_image(bot, file_path, caption)
    return actions.send_image(message.chat, image)
# END send_picture_with_html_caption_example


# START list_action_example
list_action_example = use.list_action(
    Faq,
    template_name='demo/bot/list.html',
)
# END list_action_example


# START list_action_pagination_example
list_action_pagination_example = use.list_action(
    Faq,
    template_name='demo/bot/list.html',
    pagination=use.list.Pagination(1, call_data_pattern='list_action_pagination {page}')
)
# END list_action_pagination_example


# START detail_action_example
detail_action_example = use.detail_action(
    Faq,
    'demo/bot/detail.html',
)
# END detail_action_example


# START template_action_example
template_action_example = use.template_action(
    'demo/bot/reply.html',
    context={
        'this': '–≠—Ç–æ',
        'message': '—Å–æ–æ–±—â–µ–Ω–∏–µ',
        'make': '–±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ –ø–æ —à–∞–±–ª–æ–Ω—É'
    }
)
# END template_action_example


# START message_with_inline_keyboard_example
def message_with_inline_keyboard_example(bot, message):
    keyboard = keyboards.inline.Keyboard(
        buttons=[
            keyboards.inline.Button('–ù–∞–∂–º–∏ –º–µ–Ω—è', 'put_on_me'),
        ]
    )
    message_with_text = messages.create_message('–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π', sender=bot)
    message_with_keyboard = messages.add_keyboard(message_with_text, keyboard)
    return actions.send_message(message.chat, message_with_keyboard)


def put_button_handler(bot, message):
    reply_message = messages.create_message(
        text='–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É, –∞ —è –æ–±—Ä–∞–±–æ—Ç–∞–ª –Ω–∞–∂–∞—Ç–∏–µ',
        sender=bot,
    )
    return actions.send_message(message.chat, reply_message)
# END message_with_inline_keyboard_example


# START message_with_reply_keyboard_example
def message_with_reply_keyboard_example(bot, message):
    keyboard = keyboards.reply.Keyboard(
        name = '–ü—Ä–∏–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã',
        buttons=[
            keyboards.reply.Button('–ù–∞–∂–º–∏ –º–µ–Ω—è üîç'),
        ]
    )
    message_with_text = messages.create_message('–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π', sender=bot)
    message_with_keyboard = messages.add_keyboard(message_with_text, keyboard)
    return actions.send_message(message.chat, message_with_keyboard)


def put_keyboard_handler(bot, message):
    reply_message = messages.create_message(
        text='–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∞ —è –æ–±—Ä–∞–±–æ—Ç–∞–ª –Ω–∞–∂–∞—Ç–∏–µ –∏ —É–±—Ä–∞–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É',
        sender=bot,
    )
    reply_message = messages.add_keyboard(reply_message, keyboards.reply.EmptyKeyboard())
    return actions.send_message(message.chat, reply_message)
# END message_with_reply_keyboard_example


# START complex_message_example
def complex_message_example(bot, message):
    first_message = messages.create_message(
        text='–ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è',
        sender=bot,
    )
    keyboard = keyboards.reply.Keyboard(
        name='–ü—Ä–∏–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã',
        buttons=[
            keyboards.reply.Button('–ù–∞–∂–º–∏ –º–µ–Ω—è üîç'),
        ]
    )
    first_message = messages.add_keyboard(first_message, keyboard)
    chat = actions.send_message(message.chat, first_message)

    file_path = Path(settings.BASE_DIR) / 'static' / 'logo_1280_640.png'
    caption = messages.create_message(
        '–ü—Ä–∏–º–µ—Ä <b>–∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ</b> —Å–æ–æ–±—â–µ–Ω–∏—è',
        bot,
        format_type='HTML'
    )
    image = messages.create_image(bot, file_path, caption)

    keyboard = keyboards.inline.Keyboard(
        buttons=[
            keyboards.inline.Button('–ù–∞–∂–º–∏ –º–µ–Ω—è', 'put_on_me'),
        ]
    )
    image = messages.add_keyboard(image, keyboard)
    return actions.send_image(chat, image)
# END complex_message_example


# START get_user_id_example
def get_user_id_example(bot, message):
    user = message.sender
    user_id = user.id
    response_message = messages.create_message(
        text=f'–í–∞—à telegram id: {user_id}',
        sender=bot,
    )
    return actions.send_message(message.chat, response_message)
# END get_user_id_example


# START send_param_text_message_example
def send_param_text_message_example(bot, message, param):
    text = f'–ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º "{param}"'
    text_message = messages.create_message(
        text=text,
        sender=bot,
    )
    return actions.send_message(message.chat, text_message)
# END send_param_text_message_example


# START param_call_buttons_example
def param_call_buttons_example(bot, message):
    keyboard = keyboards.inline.Keyboard(
        buttons=[
            keyboards.inline.Button('–ü–∞—Ä–∞–º–µ—Ç—Ä ONE', 'put_on_me_params ONE'),
            keyboards.inline.Button('–ü–∞—Ä–∞–º–µ—Ç—Ä TWO', 'put_on_me_params TWO'),
        ],
        layout=layouts.Layout(columns_count=2)
    )
    message_with_text = messages.create_message('–ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º', sender=bot)
    message_with_keyboard = messages.add_keyboard(message_with_text, keyboard)
    return actions.send_message(message.chat, message_with_keyboard)


def put_button_param_handler(bot, message, param):
    reply_message = messages.create_message(
        text=f'–†–µ–∞–∫—Ü–∏—è –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä {param}',
        sender=bot,
    )
    return actions.send_message(message.chat, reply_message)
# END param_call_buttons_example


# START sequence_example
def start_sequence_example(bot, message):
    keyboard = keyboards.force.Keyboard()
    message_with_text = messages.create_message('–ö–∞–∫ –±—ã –≤–∞—Å –∑–≤–∞–ª–∏ –Ω–∞ –±—É–∫–≤—É "–õ"?:', sender=bot)
    message_with_keyboard = messages.add_keyboard(message_with_text, keyboard)
    chat = actions.send_message(message.chat, message_with_keyboard)
    chat = bots.register_next_step_handler(bot, chat, sequence_first_name_example)
    return chat


def sequence_first_name_example(bot, message):
    first_name = message.text
    if first_name.startswith('–õ'):
        keyboard = keyboards.force.Keyboard()
        message_with_text = messages.create_message('–ö–∞–∫–æ–π –±—ã –±—ã–ª–∞ –≤–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è –Ω–∞ –±—É–∫–≤—É "–õ"?:', sender=bot)
        message_with_keyboard = messages.add_keyboard(message_with_text, keyboard)
        chat = actions.send_message(message.chat, message_with_keyboard)
        chat = bots.register_next_step_handler(bot, chat, sequence_last_name_example)
        return chat

    keyboard = keyboards.force.Keyboard()
    message_with_text = messages.create_message(
        '–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –∏–º—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:',
        sender=bot
    )
    message_with_keyboard = messages.add_keyboard(message_with_text, keyboard)
    chat = actions.send_message(message.chat, message_with_keyboard)
    chat = bots.register_next_step_handler(bot, chat, sequence_first_name_example)
    return chat


def sequence_last_name_example(bot, message):
    last_name = message.text
    if last_name.startswith('–õ'):
        # Event sourcing
        for old_message in reversed(message.chat.messages[:-1]):
            if old_message.text.startswith('–õ'):
                break
        first_name = old_message
        result_text = f'–ü—Ä–∏–≤–µ—Ç, {first_name} {last_name}'
        message_with_text = messages.create_message(result_text, sender=bot)
        chat = actions.send_message(message.chat, message_with_text)
        return chat

    keyboard = keyboards.force.Keyboard()
    message_with_text = messages.create_message(
        '–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ —Ñ–∞–º–∏–ª–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:',
        sender=bot
    )
    message_with_keyboard = messages.add_keyboard(message_with_text, keyboard)
    chat = actions.send_message(message.chat, message_with_keyboard)
    chat = bots.register_next_step_handler(bot, chat, sequence_last_name_example)
    return chat
# END param_call_buttons_example
